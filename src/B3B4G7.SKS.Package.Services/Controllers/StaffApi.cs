/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using B3B4G7.SKS.Package.Services.Attributes;
using B3B4G7.SKS.Package.Services.DTOs;
using AutoMapper;
using B3B4G7.SKS.Package.BusinessLogic.Interfaces;
using Microsoft.Extensions.Logging;
using B3B4G7.SKS.Package.BusinessLogic.Interfaces.Exceptions;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Http.Extensions;
using Microsoft.Extensions.DependencyInjection;

namespace B3B4G7.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StaffApiController : ControllerBase
    {
        private readonly IMapper _mapper;
        private readonly IStaffLogic _logic;
        private readonly ILogger<StaffApiController> _logger;
        public string BaseUrl { get; set; }

        [ActivatorUtilitiesConstructor]
        public StaffApiController(IMapper mapper, IStaffLogic logic, ILogger<StaffApiController> logger) : base()
        {
            _mapper = mapper;
            _logic = logic;
            _logger = logger;
        }

        public StaffApiController(IMapper mapper, IStaffLogic logic, ILogger<StaffApiController> logger, string baseUrl)
        {
            _mapper = mapper;
            _logic = logic;
            _logger = logger;
            BaseUrl = baseUrl;
        }

        /// <summary>
        /// Report that a Parcel has been delivered at it&#39;s final destination address. 
        /// </summary>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <response code="200">Successfully reported hop.</response>
        /// <response code="400">The operation failed due to an error.</response>
        /// <response code="404">Parcel does not exist with this tracking ID. </response>
        [HttpPost]
        [Route("/parcel/{trackingId}/reportDelivery/")]
        [ValidateModelState]
        [SwaggerOperation("ReportParcelDelivery")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult ReportParcelDelivery([FromRoute(Name = "trackingId")][Required][RegularExpression("^[A-Z0-9]{9}$")] string trackingId)
        {
            try
            {
                if(BaseUrl != "Test")
                {
                    BaseUrl = HttpContext.Request.GetDisplayUrl().Replace(HttpContext.Request.Path.Value, "");
                }
                _logger.LogInformation($"Report parcel delivery with tracking ID: {trackingId}");
                _logic.ReportParcelDelivery(trackingId, BaseUrl);
                return StatusCode(200);
            }
            catch (InvalidObjectException ex)
            {
                return StatusCode(400, new Error() { ErrorMessage = ex.Message });
            }
            catch (ParcelNotExistException ex)
            {
                return StatusCode(404, new Error() { ErrorMessage = ex.Message });
            }
            catch (Exception ex)
            {
                return StatusCode(400, new Error() { ErrorMessage = ex.Message });
            }
        }

        /// <summary>
        /// Report that a Parcel has arrived at a certain hop either Warehouse or Truck. 
        /// </summary>
        /// <param name="trackingId">The tracking ID of the parcel. E.g. PYJRB4HZ6 </param>
        /// <param name="code">The Code of the hop (Warehouse or Truck).</param>
        /// <response code="200">Successfully reported hop.</response>
        /// <response code="404">Parcel does not exist with this tracking ID or hop with code not found. </response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}/reportHop/{code}")]
        [ValidateModelState]
        [SwaggerOperation("ReportParcelHop")]
        [SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
        public virtual IActionResult ReportParcelHop([FromRoute(Name = "trackingId")][Required][RegularExpression("^[A-Z0-9]{9}$")] string trackingId, [FromRoute(Name = "code")][Required][RegularExpression("^[A-Z]{4}\\d{1,4}$")] string code)
        {
            try
            {
                if (BaseUrl != "Test")
                {
                    BaseUrl = HttpContext.Request.GetDisplayUrl().Replace(HttpContext.Request.Path.Value, "");
                }
                _logger.LogInformation($"Report parcel hop with tracking ID: {trackingId} and hop code: {code}");
                _logic.ReportParcelHop(trackingId, code, BaseUrl);
                return StatusCode(200);
            }
            catch (InvalidObjectException ex)
            {
                return StatusCode(400, new Error() { ErrorMessage = ex.Message });
            }
            catch (ParcelNotExistException ex)
            {
                return StatusCode(404, new Error() { ErrorMessage = ex.Message });
            }
            catch (HopsNotExistException ex)
            {
                return StatusCode(404, new Error() { ErrorMessage = ex.Message });
            }
            catch (Exception ex)
            {
                return StatusCode(400, new Error() { ErrorMessage = ex.Message });
            }
        }
    }
}
